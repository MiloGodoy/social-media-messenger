import clsx from 'clsx';
import React, { useCallback, useState } from 'react';
import { CloseIcon, DownloadIcon, LoadingIndicatorIcon, RetryIcon } from './icons';
import { isAudioAttachment, isMediaAttachment, isVoiceRecordingAttachment, PlayButton, } from '../Attachment';
import { BaseImage as DefaultBaseImage } from '../Gallery';
import { useAudioController } from '../Attachment/hooks/useAudioController';
import { RecordingTimer } from '../MediaRecorder';
import { FileIcon } from '../ReactFileUtilities';
import { useComponentContext, useMessageInputContext } from '../../context';
export var AttachmentPreviewList = function () {
    var _a = useMessageInputContext('AttachmentPreviewList'), attachments = _a.attachments, fileOrder = _a.fileOrder, imageOrder = _a.imageOrder, removeAttachment = _a.removeAttachment, uploadAttachment = _a.uploadAttachment;
    return (React.createElement("div", { className: 'str-chat__attachment-preview-list' },
        React.createElement("div", { className: 'str-chat__attachment-list-scroll-container', "data-testid": 'attachment-list-scroll-container' },
            attachments.map(function (attachment) {
                var _a, _b;
                if (isVoiceRecordingAttachment(attachment)) {
                    return (React.createElement(VoiceRecordingPreview, { attachment: attachment, handleRetry: uploadAttachment, key: ((_a = attachment.$internal) === null || _a === void 0 ? void 0 : _a.id) || attachment.asset_url, mimeType: attachment.mime_type, removeAttachment: removeAttachment }));
                }
                else if (isAudioAttachment(attachment) || isMediaAttachment(attachment)) {
                    // unnecessary to pass handleRetry as video and audio if among attachments is already uploaded
                    // - user looking at the edit message input
                    return (React.createElement(FilePreview, { attachment: attachment, handleRetry: uploadAttachment, key: ((_b = attachment.$internal) === null || _b === void 0 ? void 0 : _b.id) || attachment.asset_url, removeAttachment: removeAttachment }));
                }
                return null;
            }),
            imageOrder.map(function (id) { return (React.createElement(ImagePreviewItem, { id: id, key: id })); }),
            fileOrder.map(function (id) { return (React.createElement(FilePreviewItem, { id: id, key: id })); }))));
};
var VoiceRecordingPreview = function (_a) {
    var _b, _c, _d;
    var attachment = _a.attachment, handleRetry = _a.handleRetry, mimeType = _a.mimeType, removeAttachment = _a.removeAttachment;
    var _e = useAudioController({ mimeType: mimeType }), audioRef = _e.audioRef, isPlaying = _e.isPlaying, secondsElapsed = _e.secondsElapsed, togglePlay = _e.togglePlay;
    return (React.createElement("div", { className: 'str-chat__attachment-preview-voice-recording', "data-testid": 'attachment-preview-voice-recording' },
        React.createElement("audio", { ref: audioRef },
            React.createElement("source", { "data-testid": 'audio-source', src: attachment.asset_url, type: attachment.mime_type })),
        React.createElement(PlayButton, { isPlaying: isPlaying, onClick: togglePlay }),
        React.createElement("button", { className: 'str-chat__attachment-preview-delete', "data-testid": 'file-preview-item-delete-button', disabled: ((_b = attachment.$internal) === null || _b === void 0 ? void 0 : _b.uploadState) === 'uploading', onClick: function () { var _a; return ((_a = attachment.$internal) === null || _a === void 0 ? void 0 : _a.id) && removeAttachment(attachment.$internal.id); } },
            React.createElement(CloseIcon, null)),
        ((_c = attachment.$internal) === null || _c === void 0 ? void 0 : _c.uploadState) === 'failed' && !!handleRetry && (React.createElement("button", { className: 'str-chat__attachment-preview-error str-chat__attachment-preview-error-file', "data-testid": 'file-preview-item-retry-button', onClick: function () { return handleRetry(attachment); } },
            React.createElement(RetryIcon, null))),
        React.createElement("div", { className: 'str-chat__attachment-preview-metadata' },
            React.createElement("div", { className: 'str-chat__attachment-preview-file-name', title: attachment.title }, attachment.title),
            typeof attachment.duration !== 'undefined' && (React.createElement(RecordingTimer, { durationSeconds: secondsElapsed || attachment.duration })),
            ((_d = attachment.$internal) === null || _d === void 0 ? void 0 : _d.uploadState) === 'uploading' && React.createElement(LoadingIndicatorIcon, { size: 17 })),
        React.createElement("div", { className: 'str-chat__attachment-preview-file-icon' },
            React.createElement(FileIcon, { filename: attachment.title, mimeType: attachment.mime_type, version: '2' }))));
};
var FilePreview = function (_a) {
    var _b, _c, _d, _e;
    var attachment = _a.attachment, handleRetry = _a.handleRetry, removeAttachment = _a.removeAttachment;
    return (React.createElement("div", { className: 'str-chat__attachment-preview-file', "data-testid": 'attachment-preview-file' },
        React.createElement("div", { className: 'str-chat__attachment-preview-file-icon' },
            React.createElement(FileIcon, { filename: attachment.title, mimeType: attachment.mime_type, version: '2' })),
        React.createElement("button", { className: 'str-chat__attachment-preview-delete', "data-testid": 'file-preview-item-delete-button', disabled: ((_b = attachment.$internal) === null || _b === void 0 ? void 0 : _b.uploadState) === 'uploading', onClick: function () { var _a, _b; return ((_a = attachment.$internal) === null || _a === void 0 ? void 0 : _a.id) && removeAttachment((_b = attachment.$internal) === null || _b === void 0 ? void 0 : _b.id); } },
            React.createElement(CloseIcon, null)),
        ((_c = attachment.$internal) === null || _c === void 0 ? void 0 : _c.uploadState) === 'failed' && !!handleRetry && (React.createElement("button", { className: 'str-chat__attachment-preview-error str-chat__attachment-preview-error-file', "data-testid": 'file-preview-item-retry-button', onClick: function () { return handleRetry(attachment); } },
            React.createElement(RetryIcon, null))),
        React.createElement("div", { className: 'str-chat__attachment-preview-file-end' },
            React.createElement("div", { className: 'str-chat__attachment-preview-file-name', title: attachment.title }, attachment.title),
            ((_d = attachment.$internal) === null || _d === void 0 ? void 0 : _d.uploadState) === 'finished' && (React.createElement("a", { className: 'str-chat__attachment-preview-file-download', download: true, href: attachment.asset_url, rel: 'noreferrer', target: '_blank' },
                React.createElement(DownloadIcon, null))),
            ((_e = attachment.$internal) === null || _e === void 0 ? void 0 : _e.uploadState) === 'uploading' && React.createElement(LoadingIndicatorIcon, { size: 17 }))));
};
export var ImagePreviewItem = function (_a) {
    var _b;
    var id = _a.id;
    var _c = useComponentContext('ImagePreviewItem').BaseImage, BaseImage = _c === void 0 ? DefaultBaseImage : _c;
    var _d = useMessageInputContext('ImagePreviewItem'), imageUploads = _d.imageUploads, removeImage = _d.removeImage, uploadImage = _d.uploadImage;
    var _e = useState(false), previewError = _e[0], setPreviewError = _e[1];
    var handleRemove = useCallback(function (e) {
        e.stopPropagation();
        removeImage(id);
    }, [removeImage, id]);
    var handleRetry = useCallback(function () { return uploadImage(id); }, [uploadImage, id]);
    var handleLoadError = useCallback(function () { return setPreviewError(true); }, []);
    var image = imageUploads[id];
    // do not display scraped attachments
    if (!image || image.og_scrape_url)
        return null;
    return (React.createElement("div", { className: clsx('str-chat__attachment-preview-image', {
            'str-chat__attachment-preview-image--error': previewError,
        }), "data-testid": 'attachment-preview-image' },
        React.createElement("button", { className: 'str-chat__attachment-preview-delete', "data-testid": 'image-preview-item-delete-button', disabled: image.state === 'uploading', onClick: handleRemove },
            React.createElement(CloseIcon, null)),
        image.state === 'failed' && (React.createElement("button", { className: 'str-chat__attachment-preview-error str-chat__attachment-preview-error-image', "data-testid": 'image-preview-item-retry-button', onClick: handleRetry },
            React.createElement(RetryIcon, null))),
        image.state === 'uploading' && (React.createElement("div", { className: 'str-chat__attachment-preview-image-loading' },
            React.createElement(LoadingIndicatorIcon, { size: 17 }))),
        (image.previewUri || image.url) && (React.createElement(BaseImage, { alt: image.file.name, className: 'str-chat__attachment-preview-thumbnail', onError: handleLoadError, src: (_b = image.previewUri) !== null && _b !== void 0 ? _b : image.url, title: image.file.name }))));
};
var FilePreviewItem = function (_a) {
    var id = _a.id;
    var _b = useMessageInputContext('FilePreviewItem'), fileUploads = _b.fileUploads, removeFile = _b.removeFile, uploadFile = _b.uploadFile;
    var handleRemove = useCallback(function (id) {
        removeFile(id);
    }, [removeFile]);
    var handleRetry = useCallback(function (attachment) { return attachment.$internal && uploadFile(attachment.$internal.id); }, [uploadFile]);
    var file = fileUploads[id];
    if (!file)
        return null;
    var attachment = {
        $internal: {
            file: file.file,
            id: id,
            uploadState: file.state,
        },
        asset_url: file.url,
        mime_type: file.file.type,
        title: file.file.name,
    };
    return (React.createElement(FilePreview, { attachment: attachment, handleRetry: handleRetry, removeAttachment: handleRemove }));
};
